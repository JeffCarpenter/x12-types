use super::*;

#[test]
fn parse_835_01() {
    //source: https://www.1edisource.com/resources/edi-transactions-sets/edi-835/
    let str = r#"ISA*01*0000000000*01*0000000000*ZZ*ABCDEFGHIJKLMNO*ZZ*123456789012345*101127*1719*U*00400*000003438*0*P*>~
GS*HP*ABCCOM*01017*20110315*1005*1*X*004010X091A1~
ST*835*07504123~
BPR*H*5.75*C*NON************20110315~
TRN*1*A04B001017.07504*1346000128~
DTM*405*20110308~
N1*PR*ASHTABULA COUNTY ADAMH BD*XX*6457839886~
N3*4817 STATE ROAD SUITE 203~
N4*ASHTABULA*OH*44004~
N1*PE*LAKE AREA RECOVERY CENTER *FI*346608640~
N3*2801 C. COURT~
N4*ASHTABULA*OH*44004~
REF*PQ*1017~
LX*1~
CLP*444444*1*56.70*56.52*0*MC*0000000655555555*53~
NM1*QC*1*FUDD*ELMER*S***MI*1333333~
NM1*82*2*WECOVERWY SVCS*****FI*346608640~
REF*F8*A76B04054~
SVC*HC:H0005:HF:H9*56.70*56.52**6~
DTM*472*20110205~
CAS*CO*42*0.18*0~
REF*6R*444444~
CLP*999999*4*25.95*0*25.95*13*0000000555555555*11~
NM1*QC*1*SAM*YOSEMITE*A***MI*3333333~
NM1*82*2*ACME AGENCY*****FI*310626223~
REF*F8*H57B10401~
SVC*ZZ:M2200:HE*25.95*0**1~
DTM*472*20021224~
CAS*CR*18*25.95*0~
CAS*CO*42*0*0~
REF*6R*999999~
CLP*888888*4*162.13*0*162.13*MC*0000000456789123*11~
NM1*QC*1*SQUAREPANTS*BOB* ***MI*2222222~
NM1*82*2*BIKINI AGENCY*****FI*310626223~
REF*F8*H57B10401~
SVC*ZZ:M151000:F0*162.13*0**1.9~
DTM*472*20020920~
CAS*CO*29*162.13*0*42*0*0~
REF*6R*888888~
CLP*111111*2*56.52*18.88*0*13*0000000644444444*53~
NM1*QC*1*LEGHORN*FOGHORN*P***MI*7777777~
NM1*82*2*CHICKENHAWK SVCS*****FI*346608640~
REF*F8*A76B04054~
SVC*HC:H0005:HF:H9*56.52*18.88**6~
DTM*472*20031209~
CAS*CO*42*0*0~
CAS*OA*23*37.64*0~
REF*6R*111111~
CLP*121212*4*56.52*0*0*13*0000000646464640*53~
NM1*QC*1*EXPLORER*DORA****MI*1717171~
NM1*82*2*SWIPER AGENCY*****FI*346608640~
REF*F8*A76B04054~
SVC*HC:H0005:HF:H9*56.52*0**6~
DTM*472*20031202~
CAS*CO*42*0*0~
CAS*OA*23*57.6*0*23*-1.08*0~
REF*6R*121212~
CLP*333333*1*74.61*59.69*14.92*13*0000000688888888*55~
NM1*QC*1*BEAR*YOGI* ***MI*2222222~
NM1*82*2*JELLYSTONE SVCS*****FI*346608640~
REF*F8*A76B04054~
SVC*ZZ:A0230:HF*74.61*59.69**1~
DTM*472*20110203~
CAS*PR*2*14.92*0~
CAS*CO*42*0*0~
REF*6R*333333~
CLP*777777*25*136.9*0*0*13*0000000622222222*53~
NM1*QC*1*BIRD*TWEETY*M***MI*4444444~
NM1*82*2*GRANNY AGENCY*****FI*340716747~
REF*F8*A76B03293~
SVC*HC:H0015:HF:99:H9*136.9*0**1~
DTM*472*20030911~
CAS*PI*104*136.72*0~
CAS*CO*42*0.18*0~
REF*6R*777777~
CLP*123456*22*-42.58*-42.58*0*13*0000000657575757*11~
NM1*QC*1*SIMPSON*HOMER* ***MI*8787888~
NM1*82*2*DOH GROUP*****FI*310626223~
REF*F8*A57B04033~
SVC*HC:H0036:GT:UK*-42.58*-42.58**-2~
DTM*472*20110102~
CAS*CR*141*0*0*42*0*0*22*0*0~
CAS*OA*141*0*0~
REF*6R*123456~
CLP*090909*22*-86.76*-86.76*0*MC*0000000648484848*53~
NM1*QC*1*DUCK*DAFFY*W***MI*1245849~
NM1*82*2*ABTHSOLUTE HELP*****FI*346608640~
REF*F8*A76B04054~
SVC*HC:H0004:HF:H9*-86.76*-86.76**-4~
DTM*472*20110210~
CAS*CR*22*0*0*42*0*0~
CAS*OA*22*0*0~
REF*6R*090909~
LQ*HE*MA92~
SE*93*07504123~
GE*1*1~
IEA*1*004075123~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_02() {
    //source: https://github.com/EdiFabric/X12.NET/blob/master/Files/HIPAA/Payment.txt
    let str = r#"ISA*00*          *00*          *ZZ*1234567        *ZZ*11111          *170508*1141*^*00501*000000101*1*P*:~
GS*HC*XXXXXXX*XXXXX*20170617*1741*101*X*005010X221A1~
ST*835*0001~
BPR*I*34.00*C*CHK************20050318~
TRN*1*0063158ABC*1566339911~
REF*EV*030240928~
DTM*405*20050318~
N1*PR*YOUR TAX DOLLARS AT WORK~
N3*481A00 DEER RUN ROAD~
N4*WEST PALM BCH*FL*11114~
PER*BL*JOHN WAYNE*TE*8005551212*EX*123~
N1*PE*ATONEWITHHEALTH*FI*3UR334563~
N3*3501 JOHNSON STREET~
N4*SUNSHINE*FL*12345~
REF*PQ*11861~
LX*1~
CLP*0001000055*2*541*34**12*50650619501~
NM1*QC*1*BURCK*RAYMOND*W***MI*987654321~
NM1*82*2*PROFESSIONAL TEST 1*****BS*34426~
DTM*232*20050202~
DTM*233*20050202~
SVC*HC:55669*541*34*1~
DTM*472*20050202~
CAS*OA*23*516~
CAS*OA*94*-9~
REF*1B*44280~
AMT*B6*550~
SE*26*0001~
GE*1*101~
IEA*1*000000101~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_03() {
    //source: https://github.com/Project-Herophilus/Project-Herophilus-Assets/blob/main/Testing/TestData/samples-edi/835%20Inst%20Sample(Inpatient%20DRG%20Retro).txt
    let str = r#"ISA*00*          *00*          *ZZ*EMEDNYBAT      *ZZ*ETIN           *140101*0730*^*00501*123456789*0*T*:~GS*HP*EMEDNYBAT*ETIN*20140101*07294900*123456789*X*005010X221A1~ST*835*123456789~BPR*I*1.57*C*ACH*CCP*01*123456789*DA*123456789123*1141797357**01*987654321*DA*9876543210*20140101~TRN*1*123456789012345*1141797357~REF*EV*ETIN~DTM*405*20140101~N1*PR*NYSDOH~N3*OFFICE OF HEALTH INSURANCE PROGRAMS*CORNING TOWER, EMPIRE STATE PLAZA~N4*ALBANY*NY*122370080~PER*BL*PROVIDER SERVICES*TE*8003439000*UR*WWW.EMEDNY.ORG~N1*PE*FACILITY NAME*XX*0123456789~N4*A CITY IN*NY*100011234~REF*TJ*987654321~LX*1~CLP*9876543210ABC*22*-37617.33*-627.97**MC*1300000000000020*11*1**7753*1.1919~CAS*CO*45*-36989.36~NM1*QC*1*PATIENTLNAME*PATIENTFNAME****MI*AA11111A~NM1*82*1******XX*1234567890~MIA*0***-19.37*N689~REF*EA*098765432109876~REF*9A*2946~DTM*232*20130121~DTM*233*20130125~QTY*CA*4~CLP*9876543210ABC*1*37617.33*629.54**MC*1400000000000020*11*7**7753*1.2317~CAS*CO*45*36987.79~NM1*QC*1*PATIENTLNAME*PATIENTFNAME****MI*AA11111A~NM1*82*1******XX*1234567890~MIA*0***19.37*N419~REF*EA*987654321XYZ123~REF*9A*3130~DTM*232*20130121~DTM*233*20130125~AMT*AU*629.54~QTY*CA*4~SE*35*123456789~GE*1*123456789~IEA*1*123456789~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_04() {
    //source: https://github.com/Project-Herophilus/Project-Herophilus-Assets/blob/main/Testing/TestData/samples-edi/835%20Sample%20(Institutional%20Claims%20only).2014.txt
    let str = r#"ISA*00*          *00*          *ZZ*EMEDNYBAT      *ZZ*ETIN           *100101*1000*^*00501*006000600*0*T*:~GS*HP*EMEDNYBAT*ETIN*20100101*1050*6000600*X*005010X221A1~ST*835*1740~BPR*I*1481.99*C*ACH*CCP*01*111*DA*33*1234567890**01*111*DA*22*20100101~TRN*1*10100000000*1000000000~REF*EV*ETIN~DTM*405*20100101~N1*PR*NYSDOH~N3*OFFICE OF HEALTH INSURANCE PROGRAMS*CORNING TOWER, EMPIRE STATE PLAZA~N4*ALBANY*NY*122370080~PER*BL*PROVIDER SERVICES*TE*8003439000*UR*www.emedny.org~N1*PE*MAJOR MEDICAL PROVIDER*XX*9999999995~LX*1~CLP*PATIENT ACCOUNT NUMBER*3*137.48*0**MC*1000210000000030*34*1~CAS*CO*39*137.48~NM1*QC*1*SUBMITTED LAST*SUBMITTED FIRST****MI*LL99999L~REF*EA*PATIENT ACCOUNT NUMBER~REF*9A*2422~REF*G1*11111111111~DTM*232*20100101~DTM*233*20100101~CLP*PATIENT ACCOUNT NUMBER*1*2286.99*1481.99*805*MC*1000220000000020*21*3~CAS*PR*142*805~NM1*QC*1*SUBMITTED LAST*SUBMITTED FIRST****MI*LL88888L~NM1*74*1*CORRECTED LAST*CORRECTED FIRST~NM1*82*1******XX*9999999995~REF*EA*PATIENT ACCOUNT NUMBER~REF*9A*3839~DTM*232*20100101~DTM*233*20100101~AMT*AU*2286.99~QTY*CA*9~SE*31*1740~GE*1*6000600~IEA*1*006000600~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_05() {
    //source: https://github.com/Project-Herophilus/Project-Herophilus-Assets/blob/main/Testing/TestData/samples-edi/835%20Sample%20(Professional%20Claims%20only-no%20payment).2014.txt
    let str = r#"ISA*00*          *00*          *ZZ*EMEDNYBAT      *ZZ*ETIN           *100101*1000*^*00501*006000600*0*T*:~GS*HP*EMEDNYBAT*ETIN*20100101*1050*6000600*X*005010X221A1~ST*835*1740~BPR*H*0*C*NON************20100101~TRN*1*10100000000*1000000000~REF*EV*ETIN~DTM*405*20100101~N1*PR*NYSDOH~N3*OFFICE OF HEALTH INSURANCE PROGRAMS*CORNING TOWER, EMPIRE STATE PLAZA~N4*ALBANY*NY*122370080~PER*BL*PROVIDER SERVICES*TE*8003439000*UR*www.emedny.org~N1*PE*MAJOR MEDICAL PROVIDER*XX*9999999995~REF*TJ*000000000~LX*1~CLP*PATIENT ACCOUNT NUMBER*2*34*0**MC*1000220000000030*11~NM1*QC*1*SUBMITTED LAST*SUBMITTED FIRST****MI*LL88888L~NM1*74*1*CORRECTED LAST*CORRECTED FIRST~REF*EA*PATIENT ACCOUNT NUMBER~DTM*232*20100101~DTM*233*20100101~SVC*HC:V2020*12*0**0~DTM*472*20100101~CAS*CO*29*12~SVC*HC:V2103*22*0**0~DTM*472*20100101~CAS*CO*29*22~SE*25*1740~GE*1*6000600~IEA*1*006000600~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_06() {
    //source: https://github.com/Project-Herophilus/Project-Herophilus-Assets/blob/main/Testing/TestData/samples-edi/835%20Sample%20(Professional%20Claims%20only-w%20payment).2014.txt
    let str = r#"ISA*00*          *00*          *ZZ*EMEDNYBAT      *ZZ*ETIN           *100101*1000*^*00501*006000600*0*T*:~GS*HP*EMEDNYBAT*ETIN*20100101*1050*6000600*X*005010X221A1~ST*835*1740~BPR*I*45.75*C*ACH*CCP*01*111*DA*33*1234567890**01*111*DA*22*20100101~TRN*1*10100000000*1000000000~REF*EV*ETIN~DTM*405*20100101~N1*PR*NYSDOH~N3*OFFICE OF HEALTH INSURANCE PROGRAMS*CORNING TOWER, EMPIRE STATE PLAZA~N4*ALBANY*NY*122370080~PER*BL*PROVIDER SERVICES*TE*8003439000*UR*www.emedny.org~N1*PE*MAJOR MEDICAL PROVIDER*XX*9999999995~REF*TJ*000000000~LX*1~CLP*PATIENT ACCOUNT NUMBER*1*34.25*34.25**MC*1000210000000030*11~NM1*QC*1*SUBMITTED LAST*SUBMITTED FIRST****MI*LL99999L~NM1*74*1*CORRECTED LAST*CORRECTED FIRST~REF*EA*PATIENT ACCOUNT NUMBER~DTM*232*20100101~DTM*233*20100101~AMT*AU*34.25~SVC*HC:V2020:RB*6*6**1~DTM*472*20100101~AMT*B6*6~SVC*HC:V2700:RB*2.75*2.75**1~DTM*472*20100101~AMT*B6*2.75~SVC*HC:V2103:RB*5.5*5.5**1~DTM*472*20100101~AMT*B6*5.5~SVC*HC:S0580*20*20**2~DTM*472*20100101~AMT*B6*20~CLP*PATIENT ACCOUNT NUMBER*2*34*0**MC*1000220000000020*11~NM1*QC*1*SUBMITTED LAST*SUBMITTED FIRST****MI*LL88888L~NM1*74*1*CORRECTED LAST*CORRECTED FIRST~REF*EA*PATIENT ACCOUNT NUMBER~DTM*232*20100101~DTM*233*20100101~SVC*HC:V2020*12*0**0~DTM*472*20100101~CAS*CO*29*12~SVC*HC:V2103*22*0**0~DTM*472*20100101~CAS*CO*29*22~CLP*PATIENT ACCOUNT NUMBER*2*34.25*11.5**MC*1000230000000020*11~NM1*QC*1*SUBMITTED LAST*SUBMITTED FIRST****MI*LL77777L~NM1*74*1*CORRECTED LAST*CORRECTED FIRST~REF*EA*PATIENT ACCOUNT NUMBER~DTM*232*20100101~DTM*233*20100101~AMT*AU*11.5~SVC*HC:V2020:RB*6*6**1~DTM*472*20100101~AMT*B6*6~SVC*HC:V2103:RB*5.5*5.5**1~DTM*472*20130917~AMT*B6*5.5~SVC*HC:V2700:RB*2.75*0**0~DTM*472*20100101~CAS*CO*251*2.75~LQ*HE*N206~SVC*HC:S0580*20*0**0~DTM*472*20100101~CAS*CO*251*20~LQ*HE*N206~SE*65*1740~GE*1*6000600~IEA*1*006000600~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_07() {
    //source: https://github.com/Project-Herophilus/Project-Herophilus-Assets/blob/main/Testing/TestData/samples-edi/835%20Sample%20Pharmacy.2014.txt
    let str = r#"ISA*00*          *00*          *ZZ*EMEDNYBAT      *ZZ*ETIN           *100101*1000*^*00501*006000600*0*T*:~GS*HP*EMEDNYBAT*ETIN*20100101*1050*6000600*X*005010X221A1~ST*835*1740~BPR*I*219.65*C*ACH*CCP*01*111*DA*33*1234567890**01*111*DA*22*20100101~TRN*1*10100000000*1000000000~REF*EV*ETIN~DTM*405*20100101~N1*PR*NYSDOH~N3*OFFICE OF HEALTH INSURANCE PROGRAMS*CORNING TOWER, EMPIRE STATE PLAZA~N4*ALBANY*NY*122370080~PER*BL*PROVIDER SERVICES*TE*8003439000*UR*www.emedny.org~N1*PE*PHARMACY CORPORATION*XX*9999999995~N4*NEW YORK*NY*101162253~REF*TJ*000000000~LX*1~CLP*PAT ACCT NUM*1*4*0**MC*1000210000000030*99*0~NM1*QC*1*SUBMITTED LAST*SUBMITTED FIRST****MI*LL99999L~NM1*74*1*CORRECTED LAST*CORRECTED FIRST~DTM*232*20100101~DTM*233*20100101~DTM*036*20100101~SVC*N4:68382005501*4*0**0~DTM*472*20100101~CAS*CO*27*4~LQ*RX*65~CLP*PATIENT ACCOUNT NUMBER*1*9.46*0**MC*1000220000000030*01*0~NM1*QC*1*SUBMITTED LAST*SUBMITTED FIRST****MI*LL88888L~DTM*232*20100101~DTM*233*20100101~SVC*N4:59746011306*9.46*0**0~DTM*472*20100101~CAS*CO*16*9.46~LQ*RX*77~CLP*PATIENT ACCOUNT NUMBER*1*256.46*223.64**MC*1000300000000030*99*0~NM1*QC*1*SUBMITTED LAST*SUBMITTED FIRST****MI*LL77777L~DTM*232*20100101~DTM*233*20100101~AMT*AU*223.64~SVC*N4:54092051902*256.46*223.64**30~DTM*472*20100101~CAS*CO*91*-3.5**45*36.32~AMT*B6*223.64~PLB*9999999995*20100101*WO:FCN#201001010000000*3.99~SE*42*1740~GE*1*6000600~IEA*1*006000600~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_08() {
    //source: https://github.com/Project-Herophilus/Project-Herophilus-Assets/blob/main/Testing/TestData/samples-edi/835Sample(OutpatientRetro).txt
    let str = r#"ISA*00*          *00*          *ZZ*EMEDNYBAT      *ZZ*ETIN           *140101*0929*^*00501*111111123*0*P*:~
GS*HP*EMEDNYBAT*ETIN*20140101*09304100*111111123*X*005010X221A1~
ST*835*123456789~
BPR*H*0*C*NON************20140101~
TRN*1*12345678901*1141797357~
REF*EV*ETIN~
DTM*405*20140101~
N1*PR*NYSDOH~
N3*OFFICE OF HEALTH INSURANCE PROGRAMS*CORNING TOWER, EMPIRE STATE PLAZA~
N4*ALBANY*NY*122370080~
PER*BL*PROVIDER SERVICES*TE*8003439000*UR*WWW.EMEDNY.ORG~
N1*PE*EXAMPLE PROVIDER*FI*111222333~
N4*A CITY IN*NY*10001~
REF*PQ*12345678~
LX*1~
CLP*987654321*22*-7151.17*-7151.17**MC*1400000000000020*34*7~
NM1*QC*1*ANGELA*APPLE****MI*AA11111A~
MOA***N689~
REF*9A*1234~
DTM*232*20140201~
DTM*233*20140201~
AMT*AU*7131.01~
CLP*987654321*1*7151.17*7131.01**MC*1400000000000020*34*7~
CAS*CO*45*20.16~
NM1*QC*1*ANGELA*APPLE****MI*AA11111A~
MOA***N419~
REF*9A*1234~
DTM*232*20140101~
DTM*233*20140211~
AMT*AU*7131.01~
PLB*02245834*20141231*FB:FCN#201401011010200*-20.16~
SE*30*123456789~
GE*1*111111123~
IEA*1*111111123~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_09() {
    //source:
    let str = r#""#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_10() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-claim-adjustment-reason-code-45.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*10060875~BPR*I*80.00*C*CHK************20190816~TRN*1*CK NUMBER 1*1234567890~REF*EV*FAC~DTM*405*20190827~N1*PR*ANY PLAN USA~N3*1 WALK THIS WAY~N4*ANYCITY*OH*45209~PER*CX**TE*8661112222~PER*BL*EDI*TE*8002223333*EM*EDI.SUPPORT@ANYPAYER.COM~PER*IC**UR*WWW.ANYPAYER.COM~N1*PE*PROVIDER*XX*1123454567~N3*2255 ANY ROAD~N4*ANY CITY*CA*12211~REF*TJ*123456789~LX*1~CLP*PATACCT*1*400*80**MC*CLAIMNUMBER*11*1~NM1*QC*1*DOE*JOHN*N***MI*ABC123456789~REF*1L*12345F~DTM*050*20190209~PER*CX*G CUSTOMER SERVICE DEPARTMENT*TE*8004074627~AMT*AU*150~SVC*HC|99213*150*80**1~DTM*472*20190101~CAS*CO*45*70~AMT*B6*80~SVC*HC|85003*100*0**1~DTM*472*20190101~CAS*CO*204*100~SVC*HC|36415*150*0**1~DTM*472*20190101~CAS*CO*97*150~SE*33*10060875~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_11() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-claim-specific-negotiated-discount.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*35681~BPR*I*132*C*CHK************20190331~TRN*1*12345*1512345678~REF*EV*CLEARINGHOUSE~N1*PR*DELTA DENTAL OF ABC~N3*225 MAIN STREET~N4*CENTERVILLE*PA*17111~PER*BL*JANE DOE*TE*9005555555~N1*PE*BAN DDS LLC*FI*999994703~LX*1~CLP*7722337*1*226*132**12*119932404007801~NM1*QC*1*DOE*SALLY****MI*SJD11111~NM1*82*1*BAN*ERIN****XX*1811901945~AMT*AU*132~SVC*AD|D0120*46*25~DTM*472*20190324~CAS*CO*131*21~AMT*B6*25~SVC*AD|D0220*25*14~DTM*472*20190324~CAS*CO*131*11~AMT*B6*14~SVC*AD|D0230*22*10~DTM*472*20190324~CAS*CO*131*12~AMT*B6*10~SVC*AD|D0274*60*34~DTM*472*20190324~CAS*CO*131*26~AMT*B6*34~SVC*AD|D1110*73*49~DTM*472*20190324~CAS*CO*131*24~AMT*B6*49~SE*35*35681~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_12() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-coordination-of-benefits-example-1a.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*35681~BPR*I*100*C*CHK************20190331~TRN*1*12345*1512345678~REF*EV*CLEARINGHOUSE~N1*PR*DELTA DENTAL OF ABC~N3*225 MAIN STREET~N4*CENTERVILLE*PA*17111~PER*BL*JANE DOE*TE*9005555555~N1*PE*BAN DDS LLC*FI*999994703~LX*1~CLP*EXAMPLE1*2*500*100**12*05090256390*11*1~CAS*OA*23*400~NM1*QC*1*TOWNSEND*WILLIAM*P***MI*XXX123456789~NM1*82*2*ACME MEDICAL CENTER*****XX*98765432111~DTM*232*20190303~DTM*233*20190304~AMT*AU*500~SE*18*35681~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_13() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-coordination-of-benefits-example-1b.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*35681~BPR*I*100*C*CHK************20190331~TRN*1*12345*1512345678~REF*EV*CLEARINGHOUSE~N1*PR*DELTA DENTAL OF ABC~N3*225 MAIN STREET~N4*CENTERVILLE*PA*17111~PER*BL*JANE DOE*TE*9005555555~N1*PE*BAN DDS LLC*FI*999994703~LX*1~CLP*EXAMPLE1*2*500*100**12*05090256390*11*1~NM1*QC*1*TOWNSEND*WILLIAM*P***MI*XXX123456789~DTM*232*20190303~DTM*233*20190304~AMT*AU*500~SVC*HC|99213*500*100**1~DTM*472*20191001~CAS*OA*23*400~REF*6R*1~AMT*B6*350~SE*21*35681~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_14() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-coordination-of-benefits-example-2a.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*35681~BPR*I*350.00*C*CHK************20190331~TRN*1*12345*1512345678~REF*EV*CLEARINGHOUSE~N1*PR*DELTA DENTAL OF ABC~N3*225 MAIN STREET~N4*CENTERVILLE*PA*17111~PER*BL*JANE DOE*TE*9005555555~N1*PE*BAN DDS LLC*FI*999994703~LX*1~CLP*EXAMPLE2*2*500*350**12*05090256390*11*1~CAS*OA*23*250**94*-100~NM1*QC*1*TOWNSEND*WILLIAM*P***MI*XXX123456789~NM1*82*2*ACME MEDICAL CENTER*****XX*98765432111~DTM*232*20190303~DTM*233*20190304~AMT*AU*500~SE*18*35681~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_15() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-coordination-of-benefits-example-2b.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*35681~BPR*I*350.00*C*CHK************20190331~TRN*1*12345*1512345678~REF*EV*CLEARINGHOUSE~N1*PR*DELTA DENTAL OF ABC~N3*225 MAIN STREET~N4*CENTERVILLE*PA*17111~PER*BL*JANE DOE*TE*9005555555~N1*PE*BAN DDS LLC*FI*999994703~LX*1~CLP*EXAMPLE2*2*500*350**12*05090256390*11*1~NM1*QC*1*TOWNSEND*WILLIAM*P***MI*XXX123456789~NM1*82*2*ACME MEDICAL CENTER*****XX*98765432111~DTM*232*20190303~DTM*233*20190304~AMT*AU*500~SVC*HC|99213*500*350**1~DTM*472*20191001~CAS*OA*23*250**94*-100~REF*6R*1~AMT*B6*600~SE*22*35681~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_16() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-coordination-of-benefits-example-3a.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*35681~BPR*I*100.00*C*CHK************20190331~TRN*1*12345*1512345678~REF*EV*CLEARINGHOUSE~N1*PR*DELTA DENTAL OF ABC~N3*225 MAIN STREET~N4*CENTERVILLE*PA*17111~PER*BL*JANE DOE*TE*9005555555~N1*PE*BAN DDS LLC*FI*999994703~LX*1~CLP*EXAMPLE3*2*500*100**12*05090256390*11*1~CAS*OA*23*600**94*-200~NM1*QC*1*TOWNSEND*WILLIAM*P***MI*XXX123456789~NM1*82*2*ACME MEDICAL CENTER*****XX*98765432111~DTM*232*20190303~DTM*233*20190304~AMT*AU*500~SE*18*35681~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_17() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-coordination-of-benefits-example-3b.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*35681~BPR*I*100.00*C*CHK************20190331~TRN*1*12345*1512345678~REF*EV*CLEARINGHOUSE~N1*PR*DELTA DENTAL OF ABC~N3*225 MAIN STREET~N4*CENTERVILLE*PA*17111~PER*BL*JANE DOE*TE*9005555555~N1*PE*BAN DDS LLC*FI*999994703~LX*1~CLP*EXAMPLE3*2*500*100**12*05090256390*11*1~NM1*QC*1*TOWNSEND*WILLIAM*P***MI*XXX123456789~NM1*82*2*ACME MEDICAL CENTER*****XX*98765432111~DTM*232*20190303~DTM*233*20190304~AMT*AU*500~SVC*HC|99213*500*100**1~DTM*472*20191001~CAS*OA*23*600**94*-200~REF*6R*1~AMT*B6*700~SE*22*35681~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_18() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-coordination-of-benefits-example-4aa.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*35681~BPR*I*100.00*C*CHK************20190331~TRN*1*12345*1512345678~REF*EV*CLEARINGHOUSE~N1*PR*DELTA DENTAL OF ABC~N3*225 MAIN STREET~N4*CENTERVILLE*PA*17111~PER*BL*JANE DOE*TE*9005555555~N1*PE*BAN DDS LLC*FI*999994703~LX*1~CLP*EXAMPLE4A*2*500*100**12*05090256390*11*1~CAS*OA*23*500**94*-100~NM1*QC*1*TOWNSEND*WILLIAM*P***MI*XXX123456789~NM1*82*2*ACME MEDICAL CENTER*****XX*98765432111~DTM*232*20190303~DTM*233*20190304~AMT*AU*500~SE*18*35681~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_19() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-coordination-of-benefits-example-4ab.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*35681~BPR*I*100.00*C*CHK************20190331~TRN*1*12345*1512345678~REF*EV*CLEARINGHOUSE~N1*PR*DELTA DENTAL OF ABC~N3*225 MAIN STREET~N4*CENTERVILLE*PA*17111~PER*BL*JANE DOE*TE*9005555555~N1*PE*BAN DDS LLC*FI*999994703~LX*1~CLP*EXAMPLE4*2*500*100**12*05090256390*11*1~NM1*QC*1*TOWNSEND*WILLIAM*P***MI*XXX123456789~NM1*82*2*ACME MEDICAL CENTER*****XX*98765432111~DTM*232*20190303~DTM*233*20190304~AMT*AU*500~SVC*HC|99213*500*100**1~DTM*472*20191001~CAS*OA*23*500**94*-100~REF*6R*1~AMT*B6*600~SE*22*35681~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_20() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-coordination-of-benefits-example-4ba.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*35681~BPR*H*0*C*NON************20190829~TRN*1*9999999999-20190829*1121212121~REF*EV*CLEARINGHOUSE~N1*PR*DELTA DENTAL OF ABC~N3*225 MAIN STREET~N4*CENTERVILLE*PA*17111~PER*BL*JANE DOE*TE*9005555555~N1*PE*BAN DDS LLC*FI*999994703~LX*1~CLP*EXAMPLE4B*2*500*0**12*05090256390*11*1~CAS*OA*23*500**94*-100~CAS*CO*45*100~NM1*QC*1*TOWNSEND*WILLIAM*P***MI*XXX123456789~NM1*82*2*ACME MEDICAL CENTER*****XX*98765432111~DTM*232*20190303~DTM*233*20190304~AMT*AU*500~SE*19*35681~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_21() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-coordination-of-benefits-example-4bb.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*35681~BPR*H*0*C*NON************20190829~TRN*1*9999999999-20190829*1121212121~REF*EV*CLEARINGHOUSE~N1*PR*DELTA DENTAL OF ABC~N3*225 MAIN STREET~N4*CENTERVILLE*PA*17111~PER*BL*JANE DOE*TE*9005555555~N1*PE*BAN DDS LLC*FI*999994703~LX*1~CLP*EXAMPLE4B*2*500*0**12*05090256390*11*1~NM1*QC*1*TOWNSEND*WILLIAM*P***MI*XXX123456789~NM1*82*2*ACME MEDICAL CENTER*****XX*98765432111~DTM*232*20190303~DTM*233*20190304~AMT*AU*500~SVC*HC|99213*500*0**1~DTM*472*20191001~CAS*OA*23*500**94*-100~CAS*CO*45*100~REF*6R*1~AMT*B6*600~SE*23*35681~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_22() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-coordination-of-benefits-example-5a.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*35681~BPR*I*100.00*C*CHK************20190331~TRN*1*12345*1512345678~REF*EV*CLEARINGHOUSE~N1*PR*DELTA DENTAL OF ABC~N3*225 MAIN STREET~N4*CENTERVILLE*PA*17111~PER*BL*JANE DOE*TE*9005555555~N1*PE*BAN DDS LLC*FI*999994703~LX*1~CLP*EXAMPLE5A*2*500*100**12*05090256390*11*1~CAS*OA*23*400~NM1*QC*1*TOWNSEND*WILLIAM*P***MI*XXX123456789~NM1*82*2*ACME MEDICAL CENTER*****XX*98765432111~DTM*232*20190303~DTM*233*20190304~AMT*AU*500~SE*18*35681~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_23() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-coordination-of-benefits-example-5b.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*35681~BPR*I*100.00*C*CHK************20190331~TRN*1*12345*1512345678~REF*EV*CLEARINGHOUSE~N1*PR*DELTA DENTAL OF ABC~N3*225 MAIN STREET~N4*CENTERVILLE*PA*17111~PER*BL*JANE DOE*TE*9005555555~N1*PE*BAN DDS LLC*FI*999994703~LX*1~CLP*EXAMPLE5A*2*500*100**12*05090256390*11*1~NM1*QC*1*TOWNSEND*WILLIAM*P***MI*XXX123456789~NM1*82*2*ACME MEDICAL CENTER*****XX*98765432111~DTM*232*20190303~DTM*233*20190304~AMT*AU*500~SVC*HC|99213*500*100**1~DTM*472*20191001~CAS*OA*23*400~REF*6R*1~AMT*B6*500~SE*22*35681~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_24() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-coordination-of-benefits-example-6a.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*35681~BPR*H*0*C*NON************20190829~TRN*1*9999999999-20190829*1121212121~REF*EV*CLEARINGHOUSE~N1*PR*DELTA DENTAL OF ABC~N3*225 MAIN STREET~N4*CENTERVILLE*PA*17111~PER*BL*JANE DOE*TE*9005555555~N1*PE*BAN DDS LLC*FI*999994703~LX*1~CLP*EXAMPLE6*2*500*0*100*12*05090256390*11*1~CAS*OA*23*400~CAS*PR*204*100~NM1*QC*1*TOWNSEND*WILLIAM*P***MI*XXX123456789~NM1*82*2*ACME MEDICAL CENTER*****XX*98765432111~DTM*232*20190303~DTM*233*20190304~SE*18*35681~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_25() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-coordination-of-benefits-example-6b.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*35681~BPR*H*0*C*NON************20190829~TRN*1*9999999999-20190829*1121212121~REF*EV*CLEARINGHOUSE~N1*PR*DELTA DENTAL OF ABC~N3*225 MAIN STREET~N4*CENTERVILLE*PA*17111~PER*BL*JANE DOE*TE*9005555555~N1*PE*BAN DDS LLC*FI*999994703~LX*1~CLP*EXAMPLE6*2*500*0*100*12*05090256390*11*1~NM1*QC*1*TOWNSEND*WILLIAM*P***MI*XXX123456789~NM1*82*2*ACME MEDICAL CENTER*****XX*98765432111~DTM*232*20190303~DTM*233*20190304~SVC*HC|99213*500*0**1~DTM*472*20191001~CAS*OA*23*400~CAS*PR*204*100~REF*6R*1~SE*21*35681~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_26() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-coordination-of-benefits-example-7a.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*35681~BPR*I*100.00*C*CHK************20190331~TRN*1*12345*1512345678~REF*EV*CLEARINGHOUSE~N1*PR*DELTA DENTAL OF ABC~N3*225 MAIN STREET~N4*CENTERVILLE*PA*17111~PER*BL*JANE DOE*TE*9005555555~N1*PE*BAN DDS LLC*FI*999994703~LX*1~CLP*EXAMPLE7*2*500*100**12*05090256390*11*1~CAS*OA*23*250~CAS*CO*45*150~NM1*QC*1*TOWNSEND*WILLIAM*P***MI*XXX123456789~NM1*82*2*ACME MEDICAL CENTER*****XX*98765432111~DTM*232*20190303~DTM*233*20190304~AMT*AU*500~SE*19*35681~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_27() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-coordination-of-benefits-example-7b.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*35681~BPR*I*100.00*C*CHK************20190331~TRN*1*12345*1512345678~REF*EV*CLEARINGHOUSE~N1*PR*DELTA DENTAL OF ABC~N3*225 MAIN STREET~N4*CENTERVILLE*PA*17111~PER*BL*JANE DOE*TE*9005555555~N1*PE*BAN DDS LLC*FI*999994703~LX*1~CLP*EXAMPLE7*2*500*100**12*05090256390*11*1~NM1*QC*1*TOWNSEND*WILLIAM*P***MI*XXX123456789~NM1*82*2*ACME MEDICAL CENTER*****XX*98765432111~DTM*232*20190303~DTM*233*20190304~AMT*AU*500~SVC*HC|99213*500*100**1~DTM*472*20191001~CAS*OA*23*250~CAS*CO*45*150~REF*6R*1~AMT*B6*350~SE*23*35681~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_28() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-coordination-of-benefits-example-8a.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*35681~BPR*I*280.00*C*CHK************20190331~TRN*1*12345*1512345678~REF*EV*CLEARINGHOUSE~N1*PR*DELTA DENTAL OF ABC~N3*225 MAIN STREET~N4*CENTERVILLE*PA*17111~PER*BL*JANE DOE*TE*9005555555~N1*PE*BAN DDS LLC*FI*999994703~LX*1~CLP*EXAMPLE8*2*500*280*70*12*05090256390*11*1~CAS*PR*2*70~CAS*CO*45*150~NM1*QC*1*TOWNSEND*WILLIAM*P***MI*XXX123456789~NM1*82*2*ACME MEDICAL CENTER*****XX*98765432111~DTM*232*20190303~DTM*233*20190304~AMT*AU*500~SE*19*35681~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_29() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-coordination-of-benefits-example-8b.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*35681~BPR*I*280.00*C*CHK************20190331~TRN*1*12345*1512345678~REF*EV*CLEARINGHOUSE~N1*PR*DELTA DENTAL OF ABC~N3*225 MAIN STREET~N4*CENTERVILLE*PA*17111~PER*BL*JANE DOE*TE*9005555555~N1*PE*BAN DDS LLC*FI*999994703~LX*1~CLP*EXAMPLE8*2*500*280*70*12*05090256390*11*1~NM1*QC*1*TOWNSEND*WILLIAM*P***MI*XXX123456789~NM1*82*2*ACME MEDICAL CENTER*****XX*98765432111~DTM*232*20190303~DTM*233*20190304~AMT*AU*500~SVC*HC|99213*500*280**1~DTM*472*20191001~CAS*PR*2*70~CAS*CO*45*150~REF*6R*1~AMT*B6*350~SE*23*35681~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_30() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-coordination-of-benefits-example-9a.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*35681~BPR*I*100.00*C*CHK************20190331~TRN*1*12345*1512345678~REF*EV*CLEARINGHOUSE~N1*PR*DELTA DENTAL OF ABC~N3*225 MAIN STREET~N4*CENTERVILLE*PA*17111~PER*BL*JANE DOE*TE*9005555555~N1*PE*BAN DDS LLC*FI*999994703~LX*1~CLP*EXAMPLE9*3*500*100**12*05090256390*11*1~CAS*OA*23*400~NM1*QC*1*TOWNSEND*WILLIAM*P***MI*XXX123456789~NM1*82*2*ACME MEDICAL CENTER*****XX*98765432111~DTM*232*20190303~DTM*233*20190304~AMT*AU*500~SE*18*35681~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_31() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-coordination-of-benefits-example-9b.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*35681~BPR*I*100.00*C*CHK************20190331~TRN*1*12345*1512345678~REF*EV*CLEARINGHOUSE~N1*PR*DELTA DENTAL OF ABC~N3*225 MAIN STREET~N4*CENTERVILLE*PA*17111~PER*BL*JANE DOE*TE*9005555555~N1*PE*BAN DDS LLC*FI*999994703~LX*1~CLP*EXAMPLE9*3*500*100**12*05090256390*11*1~NM1*QC*1*TOWNSEND*WILLIAM*P***MI*XXX123456789~NM1*82*2*ACME MEDICAL CENTER*****XX*98765432111~DTM*232*20190303~DTM*233*20190304~AMT*AU*500~SVC*HC|99213*500*100**1~DTM*472*20191001~CAS*OA*23*400~REF*6R*1~AMT*B6*450~SE*22*35681~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_32() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-correcting-the-subscriber-example-1.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*10060875~BPR*I*120.03*C*CHK************20190816~TRN*1*CK NUMBER 1*1234567890~REF*EV*FAC~DTM*405*20190827~N1*PR*ANY PLAN USA~N3*1 WALK THIS WAY~N4*ANYCITY*OH*45209~PER*CX**TE*8661112222~PER*BL*EDI*TE*8002223333*EM*EDI.SUPPORT@ANYPAYER.COM~PER*IC**UR*WWW.ANYPAYER.COM~N1*PE*PROVIDER*XX*1123454567~N3*2255 ANY ROAD~N4*ANY CITY*CA*12211~REF*TJ*123456789~LX*1~CLP*04777796TLC777122*1*155*120.03**13*8838888212*11*1~NM1*QC*1*MASTERS*MARVIN*L***MI*80444444403~NM1*IL*1*CABLE*MABEL****MI*80444444403~NM1*74*1*MASTERS*MARVIN****C*80444444401~NM1*82*1*SHELTON MD*BLAKE****XX*1666666666~REF*1L*28~REF*CE*HSOAP-LAOA~REF*1J*555555555 ~DTM*232*20191114~DTM*233*20181114~DTM*050*20181119~AMT*AU*155~SVC*HC|99393*155*120.03**1~DTM*472*20181114~CAS*CO*45*34.97~REF*LU*11~REF*6R*22261822~AMT*B6*120.03~SE*35*10060875~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_33() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-correcting-the-subscriber-example-2.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*10060875~BPR*I*35.06*C*CHK************20190816~TRN*1*CK NUMBER 1*1234567890~REF*EV*FAC~DTM*405*20190827~N1*PR*ANY PLAN USA~N3*1 WALK THIS WAY~N4*ANYCITY*OH*45209~PER*CX**TE*8661112222~PER*BL*EDI*TE*8002223333*EM*EDI.SUPPORT@ANYPAYER.COM~PER*IC**UR*WWW.ANYPAYER.COM~N1*PE*PROVIDER*XX*1123454567~N3*2255 ANY ROAD~N4*ANY CITY*CA*12211~REF*TJ*123456789~LX*1~CLP*02333TLC222222*1*115*35.06*35*13*8333333214*11*1~NM1*QC*1*KEATON*ALEX*P***MI*80000006006~NM1*IL*1*THOMAS*JASON****MI*80000006006~NM1*74*1**JEROME****C*80000006001~NM1*82*1*BLOOD MD*RED N****XX*1888888886~REF*1L*28~REF*CE*OAPOS-LAOA~DTM*232*20191113~DTM*233*20191113~DTM*050*20191119~AMT*AU*115~SVC*HC|99213*115*35.06**1~DTM*472*20191113~CAS*CO*45*44.94~CAS*PR*3*35~REF*LU*11~REF*6R*22261389~AMT*B6*70.06~SE*35*10060875~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_34() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-correcting-the-subscriber-example-3.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*10060875~BPR*I*2415.25*C*CHK************20190816~TRN*1*CK NUMBER 1*1234567890~REF*EV*FAC~DTM*405*20190827~N1*PR*ANY PLAN USA~N3*1 WALK THIS WAY~N4*ANYCITY*OH*45209~PER*CX**TE*8661112222~PER*BL*EDI*TE*8002223333*EM*EDI.SUPPORT@ANYPAYER.COM~PER*IC**UR*WWW.ANYPAYER.COM~N1*PE*PROVIDER*XX*1123454567~N3*2255 ANY ROAD~N4*ANY CITY*CA*12211~REF*TJ*123456789~LX*1~CLP*05444444TLC999999*1*3903*2415.25**13*8777777782*21*1~NM1*QC*1*GONZALES*SAMMY****MI*80455555502~NM1*IL*1*LAPLANTE*FERN****MI*80455555502~NM1*74*1***R~NM1*82*1*GOOD MD*ROBERT B****XX*19999999987~REF*1L*28~REF*CE*OAPOS-LAOA~DTM*232*20191101~DTM*233*20191101~DTM*050*20191114~AMT*AU*3903~AMT*F5*150~SVC*HC|59400*3903*2415.25**1~DTM*472*20191101~CAS*CO*45*1487.75~REF*LU*21~REF*6R*22215592~AMT*B6*2415.25~SE*35*10060875~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_35() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-dollars-and-data-sent-separate.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*112233~BPR*I*1100*C*ACH*CCP*01*888999777*DA*24681012*1935665544**01*111333555*DA*144444*20190316~TRN*1*71700666555*1935665544~DTM*405*20190314~N1*PR*RUSHMORE LIFE~N3*10 SOUTH AVENUET~N4*RAPID CITY*SD*55111~PER*BL*JOHN WAYNE*TE*8005551212*EX*123~N1*PE*ACME MEDICAL CENTER*XX*5544667733~REF*TJ*777667755~LX*1~CLP*5554555444*1*800*500*300*12*94060555410000*11*1~NM1*QC*1*BUDD*WILLIAM****MI*33344555510~AMT*AU*800~SVC*HC|99211*800*500~DTM*472*20190301~CAS*PR*1*300~AMT*B6*800~CLP*8765432112*1*1200*600*600*12*9407779923000*11*1~NM1*QC*1*SETTLE*SUSAN****MI*44455666610~AMT*AU*1200~SVC*HC|93555*1200*600~DTM*472*20190310~CAS*PR*1*600~AMT*B6*1200~SE*26*112233~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_36() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-line-service-line-penalty-tax-or-bonuses-impacting-payment-only-example-1.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*10060875~BPR*I*11.06*C*CHK************20190816~TRN*1*CK NUMBER 1*1234567890~REF*EV*FAC~DTM*405*20190827~N1*PR*ANY PLAN USA~N3*1 WALK THIS WAY~N4*ANYCITY*OH*45209~PER*CX**TE*8661112222~PER*BL*EDI*TE*8002223333*EM*EDI.SUPPORT@ANYPAYER.COM~PER*IC**UR*WWW.ANYPAYER.COM~N1*PE*PROVIDER*XX*1123454567~N3*2255 ANY ROAD~N4*ANY CITY*CA*12211~REF*TJ*123456789~LX*1~CLP*PCN*1*36.20*11.06**12*CLAIMNUMB*11*1~NM1*QC*1*LAST*FIRST*J***MI*123456789~NM1*82*1******XX*1447481825~MOA***N25~REF*1L*102345~REF*EA*065789~DTM*050*20170113~AMT*AU*36.20~SVC*HC|99214*26.2*3.06~DTM*472*20170109~CAS*CO*45*23.2**137*-.06~REF*6R*B1~AMT*B6*3~SVC*HC|36415*10*8~DTM*472*20170109~CAS*CO*45*2~REF*6R*B2~AMT*B6*8~SE*35*10060875~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_37() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-line-service-line-penalty-tax-or-bonuses-impacting-payment-only-example-2.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*10060875~BPR*I*12.00*C*CHK************20190816~TRN*1*CK NUMBER 1*1234567890~REF*EV*FAC~DTM*405*20190827~N1*PR*ANY PLAN USA~N3*1 WALK THIS WAY~N4*ANYCITY*OH*45209~PER*CX**TE*8661112222~PER*BL*EDI*TE*8002223333*EM*EDI.SUPPORT@ANYPAYER.COM~PER*IC**UR*WWW.ANYPAYER.COM~N1*PE*PROVIDER*XX*1123454567~N3*2255 ANY ROAD~N4*ANY CITY*CA*12211~REF*TJ*123456789~LX*1~CLP*PCN*1*25*12*10*12*CLAIMNUMB*11*1~NM1*QC*1*LAST*FIRST*J***MI*123456789~NM1*82*1******XX*1447481825~MOA***N25~REF*1L*102345~REF*EA*065789~DTM*050*20170113~AMT*AU*25~SVC*HC|99214*25*12~DTM*472*20170109~CAS*CO*45*5**161*-2~CAS*PR*3*10~REF*6R*123~AMT*B6*20~SE*31*10060875~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_38() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-line-service-line-penalty-tax-or-bonuses-impacting-payment-only-example-3.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*10060875~BPR*I*8.00*C*CHK************20190816~TRN*1*CK NUMBER 1*1234567890~REF*EV*FAC~DTM*405*20190827~N1*PR*ANY PLAN USA~N3*1 WALK THIS WAY~N4*ANYCITY*OH*45209~PER*CX**TE*8661112222~PER*BL*EDI*TE*8002223333*EM*EDI.SUPPORT@ANYPAYER.COM~PER*IC**UR*WWW.ANYPAYER.COM~N1*PE*PROVIDER*XX*1123454567~N3*2255 ANY ROAD~N4*ANY CITY*CA*12211~REF*TJ*123456789~LX*1~CLP*PCN*1*25*8*10*12*CLAIMNUMB*11*1~NM1*QC*1*LAST*FIRST*J***MI*123456789~NM1*82*1******XX*1447481825~MOA***N25~REF*1L*102345~REF*EA*065789~DTM*050*20170113~AMT*AU*25~SVC*HC|99214*25*8~DTM*472*20170109~CAS*CO*45*5**B4*2~CAS*PR*3*10~REF*6R*123~AMT*B6*20~SE*31*10060875~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_39() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-multiple-claims-single-check.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*35681~BPR*I*810.8*C*CHK************20190331~TRN*1*12345*1512345678~REF*EV*XYZ CLEARINGHOUSE~N1*PR*DENTAL OF ABC~N3*225 MAIN STREET~N4*CENTERVILLE*PA*17111~PER*BL*JANE DOE*TE*9005555555~N1*PE*BAN DDS LLC*XX*9999947036~REF*TJ*212121212~LX*1~CLP*7722337*1*226*132**12*119932404007801*11*1~NM1*QC*1*DOE*SANDY****MI*SJD11112~NM1*82*1*BAN*ERIN****XX*1811901945~AMT*AU*132~SVC*AD|D0120*46*25~DTM*472*20190324~CAS*CO*45*21~AMT*B6*25~SVC*AD|D0220*25*14~DTM*472*20190324~CAS*CO*45*11~AMT*B6*14~SVC*AD|D0230*22*10~DTM*472*20190324~CAS*CO*45*12~AMT*B6*10~SVC*AD|D0274*60*34~DTM*472*20190324~CAS*CO*45*26~AMT*B6*34~SVC*AD|D1110*73*49~DTM*472*20190324~CAS*CO*45*24~AMT*B6*49~CLP*7722337*1*119*74**12*119932404007801*11*1~NM1*QC*1*DOE*SALLY****MI*SJD11111~NM1*IL*1*DOE*JOHN****MI*SJD11111~NM1*82*1*BAN*ERIN****XX*1811901945~AMT*AU*74~SVC*AD|D0120*46*25~DTM*472*20190324~CAS*CO*45*21~AMT*B6*25~SVC*AD|D1110*73*49~DTM*472*20190324~CAS*CO*45*24~AMT*B6*49~CLP*7722337*1*226*108*24*12*119932404007801*11*1~NM1*QC*1*SMITH*SALLY****MI*SJD11113~NM1*82*1*BAN*ERIN****XX*1811901945~AMT*AU*132~SVC*AD|D0120*46*25~DTM*472*20190324~CAS*CO*45*21~AMT*B6*25~SVC*AD|D0220*25*0~DTM*472*20190324~CAS*PR*3*14~CAS*CO*45*11~AMT*B6*14~SVC*AD|D0230*22*0~DTM*472*20190324~CAS*PR*3*10~CAS*CO*45*12~AMT*B6*10~SVC*AD|D0274*60*34~DTM*472*20190324~CAS*CO*45*26~AMT*B6*34~SVC*AD|D1110*73*49~DTM*472*20190324~CAS*CO*45*24~AMT*B6*49~CLP*7722337*1*1145*14*902*12*119932404007801*11*1~NM1*QC*1*SMITH*SAM****MI*SJD11116~NM1*82*1*BAN*ERIN****XX*1811901945~AMT*AU*14~SVC*AD|D0220*25*14~DTM*472*20190324~CAS*CO*45*11~AMT*B6*14~SVC*AD|D2790*940*0~DTM*472*20190324~CAS*PR*3*756~CAS*CO*45*184~SVC*AD|D2950*180*0~DTM*472*20190324~CAS*PR*3*146~CAS*CO*45*34~CLP*7722337*1*348*16.8*44.2*12*119932404007801*11*1~NM1*QC*1*JONES*SAM****MI*SJD11122~NM1*82*1*BAN*ERIN****XX*1811901945~AMT*AU*28~SVC*AD|D4342*125*0~DTM*472*20190313~CAS*CO*45*125~SVC*AD|D4381*43*0~DTM*472*20190313~CAS*PR*3*33~CAS*CO*45*10~SVC*AD|D2950*180*16.8~DTM*472*20190313~CAS*PR*3*11.2~CAS*CO*45*152~AMT*B6*28~CLP*7722337*1*226*132**12*119932404007801*11*1~NM1*QC*1*JONES*SALLY****MI*SJD11133~NM1*82*1*BAN*ERIN****XX*1811901945~AMT*AU*132~SVC*AD|D0120*46*25~DTM*472*20190321~CAS*CO*45*21~AMT*B6*25~SVC*AD|D0220*25*14~DTM*472*20190321~CAS*CO*45*11~AMT*B6*14~SVC*AD|D0230*22*10~DTM*472*20190321~CAS*CO*45*12~AMT*B6*10~SVC*AD|D0274*60*34~DTM*472*20190321~CAS*CO*45*26~AMT*B6*34~SVC*AD|D1110*73*49~DTM*472*20190321~CAS*CO*45*24~AMT*B6*49~CLP*7722337*1*179*108**12*119932404007801*11*1~NM1*QC*1*DOE*SAM****MI*SJD99999~NM1*82*1*BAN*ERIN****XX*1811901945~AMT*AU*108~SVC*AD|D0120*46*25~DTM*472*20190324~CAS*CO*45*21~AMT*B6*25~SVC*AD|D0274*60*34~DTM*472*20190324~CAS*CO*45*26~AMT*B6*34~SVC*AD|D1110*73*49~DTM*472*20190324~CAS*CO*45*24~AMT*B6*49~CLP*7722337*1*129*82**12*119932404007801*11*1~NM1*QC*1*DOE*SUE****MI*SJD88888~NM1*82*1*BAN*ERIN****XX*1811901945~AMT*AU*82~SVC*AD|D0120*46*25~DTM*472*20190324~CAS*CO*45*21~AMT*B6*25~SVC*AD|D1120*54*37~DTM*472*20190324~CAS*CO*45*17~AMT*B6*37~SVC*AD|D1208*29*20~DTM*472*20190324~CAS*CO*45*9~AMT*B6*20~CLP*7722337*1*221*144**12*119932404007801*11*1~NM1*QC*1*DOE*DONNA****MI*SJD77777~NM1*82*1*BAN*ERIN****XX*1811901945~AMT*AU*144~SVC*AD|D0120*46*25~DTM*472*20190324~CAS*CO*45*21~AMT*B6*25~SVC*AD|D0330*92*62~DTM*472*20190324~CAS*CO*45*30~AMT*B6*62~SVC*AD|D1120*54*37~DTM*472*20190324~CAS*CO*45*17~AMT*B6*37~SVC*AD|D1208*29*20~DTM*472*20190324~CAS*CO*45*9~AMT*B6*20~SE*183*35681~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}

#[test]
fn parse_835_40() {
    //source: https://github.com/dwai1714/edi_parser/blob/main/spike/data_based_on_type/835/X221-not-covered-not-authorized-days.edi
    let str = r#"ISA*00*          *00*          *ZZ*SUBMITTERS ID  *ZZ*RECEIVERS ID   *200101*1253*^*00501*000000905*0*T*|~GS*HP*SENDER CODE*RECEIVER CODE*20200101*0802*1*X*005010X221A1~ST*835*10060875~BPR*I*8000.00*C*CHK************20190816~TRN*1*CK NUMBER 1*1234567890~REF*EV*FAC~DTM*405*20190827~N1*PR*ANY PLAN USA~N3*1 WALK THIS WAY~N4*ANYCITY*OH*45209~PER*CX**TE*8661112222~PER*BL*EDI*TE*8002223333*EM*EDI.SUPPORT@ANYPAYER.COM~PER*IC**UR*WWW.ANYPAYER.COM~N1*PE*PROVIDER*XX*1123454567~N3*2255 ANY ROAD~N4*ANY CITY*CA*12211~REF*TJ*123456789~LX*1~CLP*PATACCT*1*40000*8000**MC*CLAIMNUMBER*11*1~CAS*CO*197*2000*1*45*30000~NM1*QC*1*DOE*JOHN*N***MI*ABC123456789~REF*1L*12345F~DTM*232*20190101~DTM*233*20190105~DTM*050*20190209~PER*CX*G CUSTOMER SERVICE DEPARTMENT*TE*8004001212~AMT*AU*38000~QTY*CA*4~SE*27*10060875~GE*1*1~IEA*1*000000905~"#;
    let (rest, obj) = Transmission::<_835>::parse(str).unwrap();
    println!("{rest}");
    println!("{obj:?}");
    assert!(rest.is_empty());
}
